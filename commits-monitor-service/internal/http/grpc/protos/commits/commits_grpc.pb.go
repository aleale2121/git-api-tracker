// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: commits.proto

package commits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommitsMetaDataServiceClient is the client API for CommitsMetaDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommitsMetaDataServiceClient interface {
	GetRepoCommitMetaData(ctx context.Context, in *RepoCommitMetaDataRequest, opts ...grpc.CallOption) (*RepoCommitMetaDataResponse, error)
}

type commitsMetaDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitsMetaDataServiceClient(cc grpc.ClientConnInterface) CommitsMetaDataServiceClient {
	return &commitsMetaDataServiceClient{cc}
}

func (c *commitsMetaDataServiceClient) GetRepoCommitMetaData(ctx context.Context, in *RepoCommitMetaDataRequest, opts ...grpc.CallOption) (*RepoCommitMetaDataResponse, error) {
	out := new(RepoCommitMetaDataResponse)
	err := c.cc.Invoke(ctx, "/commits.CommitsMetaDataService/GetRepoCommitMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitsMetaDataServiceServer is the server API for CommitsMetaDataService service.
// All implementations must embed UnimplementedCommitsMetaDataServiceServer
// for forward compatibility
type CommitsMetaDataServiceServer interface {
	GetRepoCommitMetaData(context.Context, *RepoCommitMetaDataRequest) (*RepoCommitMetaDataResponse, error)
	mustEmbedUnimplementedCommitsMetaDataServiceServer()
}

// UnimplementedCommitsMetaDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommitsMetaDataServiceServer struct {
}

func (UnimplementedCommitsMetaDataServiceServer) GetRepoCommitMetaData(context.Context, *RepoCommitMetaDataRequest) (*RepoCommitMetaDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepoCommitMetaData not implemented")
}
func (UnimplementedCommitsMetaDataServiceServer) mustEmbedUnimplementedCommitsMetaDataServiceServer() {
}

// UnsafeCommitsMetaDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommitsMetaDataServiceServer will
// result in compilation errors.
type UnsafeCommitsMetaDataServiceServer interface {
	mustEmbedUnimplementedCommitsMetaDataServiceServer()
}

func RegisterCommitsMetaDataServiceServer(s grpc.ServiceRegistrar, srv CommitsMetaDataServiceServer) {
	s.RegisterService(&CommitsMetaDataService_ServiceDesc, srv)
}

func _CommitsMetaDataService_GetRepoCommitMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoCommitMetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitsMetaDataServiceServer).GetRepoCommitMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commits.CommitsMetaDataService/GetRepoCommitMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitsMetaDataServiceServer).GetRepoCommitMetaData(ctx, req.(*RepoCommitMetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommitsMetaDataService_ServiceDesc is the grpc.ServiceDesc for CommitsMetaDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommitsMetaDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commits.CommitsMetaDataService",
	HandlerType: (*CommitsMetaDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRepoCommitMetaData",
			Handler:    _CommitsMetaDataService_GetRepoCommitMetaData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commits.proto",
}

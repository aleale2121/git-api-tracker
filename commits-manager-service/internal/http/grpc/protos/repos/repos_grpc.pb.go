// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: repos.proto

package repos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RepositoryMetaDataServiceClient is the client API for RepositoryMetaDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepositoryMetaDataServiceClient interface {
	GetRepositories(ctx context.Context, in *GetRepositoriesRequest, opts ...grpc.CallOption) (*GetRepositoriesResponse, error)
	AllRepositoriesMetaData(ctx context.Context, in *AllReposMetaDataRequest, opts ...grpc.CallOption) (*AllReposMetaDataResponse, error)
}

type repositoryMetaDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositoryMetaDataServiceClient(cc grpc.ClientConnInterface) RepositoryMetaDataServiceClient {
	return &repositoryMetaDataServiceClient{cc}
}

func (c *repositoryMetaDataServiceClient) GetRepositories(ctx context.Context, in *GetRepositoriesRequest, opts ...grpc.CallOption) (*GetRepositoriesResponse, error) {
	out := new(GetRepositoriesResponse)
	err := c.cc.Invoke(ctx, "/repos.RepositoryMetaDataService/GetRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryMetaDataServiceClient) AllRepositoriesMetaData(ctx context.Context, in *AllReposMetaDataRequest, opts ...grpc.CallOption) (*AllReposMetaDataResponse, error) {
	out := new(AllReposMetaDataResponse)
	err := c.cc.Invoke(ctx, "/repos.RepositoryMetaDataService/AllRepositoriesMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryMetaDataServiceServer is the server API for RepositoryMetaDataService service.
// All implementations must embed UnimplementedRepositoryMetaDataServiceServer
// for forward compatibility
type RepositoryMetaDataServiceServer interface {
	GetRepositories(context.Context, *GetRepositoriesRequest) (*GetRepositoriesResponse, error)
	AllRepositoriesMetaData(context.Context, *AllReposMetaDataRequest) (*AllReposMetaDataResponse, error)
	mustEmbedUnimplementedRepositoryMetaDataServiceServer()
}

// UnimplementedRepositoryMetaDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRepositoryMetaDataServiceServer struct {
}

func (UnimplementedRepositoryMetaDataServiceServer) GetRepositories(context.Context, *GetRepositoriesRequest) (*GetRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositories not implemented")
}
func (UnimplementedRepositoryMetaDataServiceServer) AllRepositoriesMetaData(context.Context, *AllReposMetaDataRequest) (*AllReposMetaDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllRepositoriesMetaData not implemented")
}
func (UnimplementedRepositoryMetaDataServiceServer) mustEmbedUnimplementedRepositoryMetaDataServiceServer() {
}

// UnsafeRepositoryMetaDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepositoryMetaDataServiceServer will
// result in compilation errors.
type UnsafeRepositoryMetaDataServiceServer interface {
	mustEmbedUnimplementedRepositoryMetaDataServiceServer()
}

func RegisterRepositoryMetaDataServiceServer(s grpc.ServiceRegistrar, srv RepositoryMetaDataServiceServer) {
	s.RegisterService(&RepositoryMetaDataService_ServiceDesc, srv)
}

func _RepositoryMetaDataService_GetRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryMetaDataServiceServer).GetRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repos.RepositoryMetaDataService/GetRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryMetaDataServiceServer).GetRepositories(ctx, req.(*GetRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryMetaDataService_AllRepositoriesMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllReposMetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryMetaDataServiceServer).AllRepositoriesMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repos.RepositoryMetaDataService/AllRepositoriesMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryMetaDataServiceServer).AllRepositoriesMetaData(ctx, req.(*AllReposMetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RepositoryMetaDataService_ServiceDesc is the grpc.ServiceDesc for RepositoryMetaDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepositoryMetaDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "repos.RepositoryMetaDataService",
	HandlerType: (*RepositoryMetaDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRepositories",
			Handler:    _RepositoryMetaDataService_GetRepositories_Handler,
		},
		{
			MethodName: "AllRepositoriesMetaData",
			Handler:    _RepositoryMetaDataService_AllRepositoriesMetaData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "repos.proto",
}
